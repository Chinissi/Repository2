variables:
  # TODO: Do we plan to support lists or mappings in variables?
#  vendor_ids:
#    - 1
#    - 2
#    - 4
  max_vendor_id: 4
  max_amount: 99999
# Note the call to Profiler.profile() takes multiple batches
# Unless filtered / specified this list of batches will be used for all metrics/parameters
rules:
  my_rule_for_ids:
    # TODO: this config specifies a class_name and module_name for the Rule class which is currently not configurable
    #  please decide whether Rule class is configurable before considering this a finalized configuration.
    class_name: Rule
    module_name: great_expectations.profiler.rule.rule
    domain_builder:
      class_name: SimpleColumnSuffixDomainBuilder
      module_name: great_expectations.profiler.domain_builder.simple_column_suffix_domain_builder
      column_name_suffixes:
        - _id
        - _type
    parameter_builders:
      - parameter_name: my_value_set_for_ids
        # NOTE: This parameter is meant to be the union of all observed batch value_sets
        class_name: MultiBatchParameterBuilder
        module_name: great_expectations.profiler.parameter_builder.multi_batch_parameter_builder
        metric_domain_kwargs: $domain.domain_kwargs
        # TODO: how to specify compute over all batches (e.g. use all batches in parameter) - options:
        # don't specify a specific batch_request and assume all batches passed via the various methods to Profiler.profile()?
#        batch_request: $batch.batch_id
        metric_name: column.distinct_values
    expectation_configuration_builders:
      - expectation_type: expect_column_values_to_be_in_set
        column: $domain.domain_kwargs.column
        # TODO: How exactly to reference the value_set?
        value_set: $my_value_set_for_ids.counts

    # expect_column_values_to_be_between for each of the _amount columns
  my_rule_for_amounts:
    class_name: Rule
    module_name: great_expectations.profiler.rule.rule
    domain_builder:
      class_name: SimpleColumnSuffixDomainBuilder
      module_name: great_expectations.profiler.domain_builder.simple_column_suffix_domain_builder
      column_name_suffixes:
        - _amount
    # Note: no parameter_builders
    expectation_configuration_builders:
      - expectation_type: expect_column_values_to_be_between
        class_name: DefaultExpectationConfigurationBuilder
        module_name: great_expectations.profiler.expectation_configuration_builder.default_expectation_configuration_builder
        # TODO: Do we support literals here or must this be defined in variables?
        min_value: 0
        max_value: $variables.max_user_id
        column: $domain.domain_kwargs.column

  my_rule_for_numeric_data:
    class_name: Rule
    module_name: great_expectations.profiler.rule.rule
    domain_builder:
      # TODO: Change this to semantic type numeric
      class_name: SimpleColumnSuffixDomainBuilder
      module_name: great_expectations.profiler.domain_builder.simple_column_suffix_domain_builder
      column_name_suffixes:
        - _amount
    # These parameter_builders are from https://github.com/superconductive/design/blob/main/docs/20201203_profiling.md
#    parameter_builders:
#      - parameter_name: mean
#        class_name: MetricParameterBuilder
#        metric_name: column.mean
#        metric_domain_kwargs: $domain.domain_kwargs
#      - parameter_name: min
#        class_name: MetricParameterBuilder
#        metric_name: column.min
#        metric_domain_kwargs: $domain.domain_kwargs
#      - parameter_name: false_positive_threshold_min
#        class_name: MultiBatchBootstrappedMetricDistributionParameterBuilder
#        batch_request: # this should be unioned with the rest of the batch request from the call to profile
#          partition_request:
#            # NOTE: interpreted like python slices e.g. most recent 10 batches
#            partition_index: "-10:"
#        metric_configuration:
#          metric_name: column.min
#          metric_domain_kwargs: $domain.domain_kwargs
#        p_values:
#          min_value: $variables.false_positive_threshold
#          max_value: 1.0
#      - parameter_name: quantile_ranges
#        class_name: MultiBatchBootstrappedMetricDistributionParameterBuilder
#        batch_request:
#          partition_request:
#            partition_index: "-10:"
#        metric_configuration:
#          metric_name: column.quantile_values
#          metric_domain_kwargs: $domain.domain_kwargs
#          metric_value_kwargs:
#            quantiles:
#              - 0.05
#              - 0.25
#              - 0.50
#              - 0.75
#              - 0.95
#        p_values:
#          min_value: ($false_positive_threshold / 2)
#          max_value: 1 - ($false_positive_threshold / 2)
#      - parameter_name: max
#        class_name: MetricParameterBuilder
#        metric_name: column.max
#        metric_domain_kwargs: $domain.domain_kwargs
#      - parameter_name: quantiles
#        class_name: MetricParameterBuilder
#        metric_name: column.quantile_values
#        metric_domain_kwargs: $domain.domain_kwargs
#        metric_value_kwargs:
#          quantiles:
#            - 0.05
#            - 0.25
#            - 0.50
#            - 0.75
#            - 0.95
#      expectation_configuration_builders:
#        - expectation: expect_column_min_to_be_between
#          min_value: $false_positive_threshold_min.min_value
#          max_value: $false_positive_threshold_min.max_value
#        - expectation: expect_column_quantile_values_to_be_between
#          quantiles:
#            - 0.05
#            - 0.25
#            - 0.50
#            - 0.75
#            - 0.95
#          value_ranges: $quantile_ranges
#        - expectation: expect_column_max_to_be_between
#          min_value: 0.9 * $max
#          max_value: 1.1 * $max
#        - expectation: expect_column_median_to_be_between
#          min_value: # in this example, the resulting configuration is not a value, but an evaluation parameter refering to a metric that must be calculated for each validation to validation of the configuration
#            "$PARAMETER": 0.9 *
#              metric_name: column.median
#              metric_batch_kwargs:
#                batch_request:
#                  partition_request:
#                    partition_index: -1
#                column: $domain.domain_kwargs.column
#          max_value: # in this example, the resulting configuration is not a value, but an evaluation parameter refering to a metric that must be calculated for each validation to validation of the configuration
#            "$PARAMETER": 1.1 *
#              metric_name: column.median
#              metric_batch_kwargs:
#                batch_request:
#                  partition_request:
#                    partition_index: -1
#                column: $domain.domain_kwargs.column



  # TODO: Reference specific batch (index or name) / filter batches
  # TODO: rule based on data from specific batch
  # TODO: rule based on data from relative batch
  # TODO: rule based on data from relative batch with relative expectation (Evaluation Parameter)
  # TODO: Are all permutations of the above TODOs possible?
