from __future__ import annotations

import uuid
from typing import TYPE_CHECKING

from great_expectations.experimental.metric_repository.metrics import (
    Metric,
    Metrics,
    Value,
)
from great_expectations.validator.metric_configuration import MetricConfiguration

if TYPE_CHECKING:
    from great_expectations import DataContext
    from great_expectations.datasource.fluent.interfaces import Batch, BatchRequest


class BatchInspector:
    def __init__(self, context: DataContext):
        self._context = context

    def _generate_run_id(self) -> uuid.UUID:
        return uuid.uuid4()

    def get_column_descriptive_metrics(self, batch_request: BatchRequest) -> Metrics:
        run_id = self._generate_run_id()
        self._context.get_validator(batch_request=batch_request)
        table_row_count = self._get_table_row_count_metric(
            run_id=run_id, batch_request=batch_request
        )
        column_names = self._get_column_names_metric(
            run_id=run_id, batch_request=batch_request
        )
        metrics = Metrics(id=run_id, metrics=[table_row_count, column_names])
        return metrics

    def _get_metric(
        self, metric_name: str, run_id: uuid.UUID, batch_request: BatchRequest
    ) -> Metric:
        validator = self._context.get_validator(batch_request=batch_request)
        # TODO: Thu - do we need the MetricConfiguration or can we just pass in the metric name?
        #  E.g. metrics_calculator.get_table_metric(metric_name)
        metric_config = MetricConfiguration(
            metric_name=metric_name,
            metric_domain_kwargs={},
            metric_value_kwargs={},
        )

        raw_metric = validator.get_metric(metric_config)

        metric = self._convert_raw_metric_to_metric_object(
            raw_metric=raw_metric,
            metric_config=metric_config,
            run_id=run_id,
            batch=validator.active_batch,
        )

        return metric

    def _get_table_row_count_metric(
        self, run_id: uuid.UUID, batch_request: BatchRequest
    ) -> Metric:
        return self._get_metric(
            metric_name="table.row_count", run_id=run_id, batch_request=batch_request
        )

    def _get_column_names_metric(
        self, run_id: uuid.UUID, batch_request: BatchRequest
    ) -> Metric:
        return self._get_metric(
            metric_name="table.columns", run_id=run_id, batch_request=batch_request
        )

    def _generate_metric_id(self) -> uuid.UUID:
        return uuid.uuid4()

    def _convert_raw_metric_to_metric_object(
        self,
        batch: Batch,
        run_id: uuid.UUID,  # TODO: Should run_id be a separate type?
        raw_metric: int | list,  # TODO: What are the possible types of raw_metric?
        metric_config: MetricConfiguration,
    ) -> Metric:
        """Convert a dict of a single metric to a Metric object.
        Args:
            raw_metric: Dict of a single metric, where keys are metric names and values are metrics.
                Generated by the MetricsCalculator.
            metric_config: MetricConfiguration object for this metric.
        Returns:
            Metric object.
        """
        # TODO: Consider just having Batch as a parameter and serializing the parts we want
        #  (e.g. datasource_name, data_asset_name, batch_id).
        metric = Metric(
            id=self._generate_metric_id(),
            run_id=run_id,
            # TODO: reimplement batch param
            # batch=batch,
            metric_name=metric_config.metric_name,
            metric_domain_kwargs=metric_config.metric_domain_kwargs,
            metric_value_kwargs=metric_config.metric_value_kwargs,
            column=metric_config.metric_domain_kwargs.get("column"),
            value=Value(value=raw_metric),
            details={},  # TODO: Pass details through
        )

        return metric
