from great_expectations.core.batch import Batch, BatchRequest
from great_expectations.experimental.column_descriptive_metrics.metrics import (
    BatchPointer,
    Metric,
    Metrics,
    Value,
)
from great_expectations.validator.metric_configuration import MetricConfiguration
from great_expectations.validator.metrics_calculator import MetricsCalculator


class MetricConverter:
    def __init__(self, organization_id: str):
        self._organization_id = organization_id

    def convert_metrics_dict_to_metrics_object(self, raw_metrics: dict) -> Metrics:
        """Convert a dict of metrics to a Metrics object.
        Args:
            raw_metrics: Dict of metrics, where keys are metric names and values are metrics.
                Generated by the MetricsCalculator.
        Returns:
            Metrics object.
        """
        # TODO: Add the rest of the metric fields, convert value to Value object:
        metric_objs = [
            Metric(name=metric_name, placeholder_value=metric)
            for metric_name, metric in raw_metrics.items()
        ]
        return Metrics(metrics=metric_objs)

    def convert_metric_dict_to_metric_object(self, raw_metric: dict) -> Metric:
        """Convert a dict of a single metric to a Metric object.
        Args:
            raw_metric: Dict of a single metric, where keys are metric names and values are metrics.
                Generated by the MetricsCalculator.
        Returns:
            Metrics object.
        """
        # TODO: Add the rest of the metric fields, convert value to Value object:

        # TODO: Implementation, Metric below is just a placeholder.
        return Metric(
            id="47d3f290-809f-4d94-a3ef-a5a510c3d2d9",
            organization_id="e3989417-2c85-447c-b084-113c9c6f5bbf",
            run_id="539f813e-9899-4b39-80b5-e909622255b3",
            batch_pointer=BatchPointer(
                datasource_name="my_datasource",
                data_asset_name="my_data_asset",
                batch_name="my_batch",
            ),
            metric_name="table.row_count",
            metric_domain_kwargs={"column": "my_column"},
            metric_value_kwargs={},
            column="my_column",
            value=Value(value=100),
            details={},
        )


class AssetInspector:
    def __init__(self, organization_id: str):
        self._metric_converter = MetricConverter(organization_id=organization_id)

    def _batch_request_to_batch(self, batch_request: BatchRequest) -> Batch:
        # TODO: Implementation. How do we get the batch from the batch_request?
        #  generally we call asset.get_batch_list(batch_request=batch_request)
        #  but we don't have an asset here so we have to use the batch request to get it,
        #  potentially from the context. Maybe this method doesn't live in the AssetInspector and instead
        #  we use the Batch in the AssetInspector methods that we get outside of the AssetInspector.
        pass

    # def get_column_descriptive_metrics(self, batch_request: BatchRequest) -> Metrics:
    #     batch = self._batch_request_to_batch(batch_request=batch_request)
    #     table_row_count = self._get_table_row_count_metric(batch=batch)
    #     metrics = Metrics(metrics=[table_row_count])
    #     return metrics

    def get_column_descriptive_metrics(self, batch: Batch) -> Metrics:
        # TODO: Generate RunID
        table_row_count = self._get_table_row_count_metric(batch=batch)
        metrics = Metrics(metrics=[table_row_count])
        return metrics

    def _get_table_row_count_metric(self, batch: Batch) -> Metric:
        # TODO: Why do we typically get the execution engine from batch.data?
        #  Shouldn't it be from the datasource?
        MetricsCalculator(execution_engine=batch.data.execution_engine)

        MetricConfiguration(
            metric_name="table.row_count",
            metric_domain_kwargs={"batch_id": batch.id},
            metric_value_kwargs={},
        )

        # raw_metric = metrics_calculator.get_metric(metric_config)
        raw_metric = {"table.row_count": 100}
        metric = self._metric_converter.convert_metric_dict_to_metric_object(
            raw_metric=raw_metric
        )

        return metric
