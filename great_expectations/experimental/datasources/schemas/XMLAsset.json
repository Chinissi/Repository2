{
    "title": "XMLAsset",
    "description": "Read XML document into a ``DataFrame`` object.\n\n.. versionadded:: 1.3.0\n\nParameters\n----------\npath_or_buffer : str, path object, or file-like object\n    Any valid XML string or path is acceptable. The string could be a URL.\n    Valid URL schemes include http, ftp, s3, and file.\n\nxpath : str, optional, default './\\*'\n    The XPath to parse required set of nodes for migration to DataFrame.\n    XPath should return a collection of elements and not a single\n    element. Note: The ``etree`` parser supports limited XPath\n    expressions. For more complex XPath, use ``lxml`` which requires\n    installation.\n\nnamespaces : dict, optional\n    The namespaces defined in XML document as dicts with key being\n    namespace prefix and value the URI. There is no need to include all\n    namespaces in XML, only the ones used in ``xpath`` expression.\n    Note: if XML document uses default namespace denoted as\n    `xmlns='<URI>'` without a prefix, you must assign any temporary\n    namespace prefix such as 'doc' to the URI in order to parse\n    underlying nodes and/or attributes. For example, ::\n\n        namespaces = {\"doc\": \"https://example.com\"}\n\nelems_only : bool, optional, default False\n    Parse only the child elements at the specified ``xpath``. By default,\n    all child elements and non-empty text nodes are returned.\n\nattrs_only :  bool, optional, default False\n    Parse only the attributes at the specified ``xpath``.\n    By default, all attributes are returned.\n\nnames :  list-like, optional\n    Column names for DataFrame of parsed XML data. Use this parameter to\n    rename original element names and distinguish same named elements.\n\nencoding : str, optional, default 'utf-8'\n    Encoding of XML document.\n\nparser : {'lxml','etree'}, default 'lxml'\n    Parser module to use for retrieval of data. Only 'lxml' and\n    'etree' are supported. With 'lxml' more complex XPath searches\n    and ability to use XSLT stylesheet are supported.\n\nstylesheet : str, path object or file-like object\n    A URL, file-like object, or a raw string containing an XSLT script.\n    This stylesheet should flatten complex, deeply nested XML documents\n    for easier parsing. To use this feature you must have ``lxml`` module\n    installed and specify 'lxml' as ``parser``. The ``xpath`` must\n    reference nodes of transformed XML document generated after XSLT\n    transformation and not the original XML document. Only XSLT 1.0\n    scripts and not later versions is currently supported.\n\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'\n    For on-the-fly decompression of on-disk data. If 'infer', then use\n    gzip, bz2, zip or xz if path_or_buffer is a string ending in\n    '.gz', '.bz2', '.zip', or 'xz', respectively, and no decompression\n    otherwise. If using 'zip', the ZIP file must contain only one data\n    file to be read in. Set to None for no decompression.\n\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib`` as header options. For other URLs (e.g.\n    starting with \"s3://\", and \"gcs://\") the key-value pairs are forwarded to\n    ``fsspec``. Please see ``fsspec`` and ``urllib`` for more details.\n\nReturns\n-------\ndf\n    A DataFrame.\n\nSee Also\n--------\nread_json : Convert a JSON string to pandas object.\nread_html : Read HTML tables into a list of DataFrame objects.\n\nNotes\n-----\nThis method is best designed to import shallow XML documents in\nfollowing format which is the ideal fit for the two-dimensions of a\n``DataFrame`` (row by column). ::\n\n        <root>\n            <row>\n              <column1>data</column1>\n              <column2>data</column2>\n              <column3>data</column3>\n              ...\n           </row>\n           <row>\n              ...\n           </row>\n           ...\n        </root>\n\nAs a file format, XML documents can be designed any way including\nlayout of elements and attributes as long as it conforms to W3C\nspecifications. Therefore, this method is a convenience handler for\na specific flatter design and not all possible XML structures.\n\nHowever, for more complex XML documents, ``stylesheet`` allows you to\ntemporarily redesign original document with XSLT (a special purpose\nlanguage) for a flatter version for migration to a DataFrame.\n\nThis function will *always* return a single :class:`DataFrame` or raise\nexceptions due to issues with XML document, ``xpath``, or other\nparameters.\n\nExamples\n--------\n>>> xml = '''<?xml version='1.0' encoding='utf-8'?>\n... <data xmlns=\"http://example.com\">\n...  <row>\n...    <shape>square</shape>\n...    <degrees>360</degrees>\n...    <sides>4.0</sides>\n...  </row>\n...  <row>\n...    <shape>circle</shape>\n...    <degrees>360</degrees>\n...    <sides/>\n...  </row>\n...  <row>\n...    <shape>triangle</shape>\n...    <degrees>180</degrees>\n...    <sides>3.0</sides>\n...  </row>\n... </data>'''\n\n>>> df = pd.read_xml(xml)\n>>> df\n      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0\n\n>>> xml = '''<?xml version='1.0' encoding='utf-8'?>\n... <data>\n...   <row shape=\"square\" degrees=\"360\" sides=\"4.0\"/>\n...   <row shape=\"circle\" degrees=\"360\"/>\n...   <row shape=\"triangle\" degrees=\"180\" sides=\"3.0\"/>\n... </data>'''\n\n>>> df = pd.read_xml(xml, xpath=\".//row\")\n>>> df\n      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0\n\n>>> xml = '''<?xml version='1.0' encoding='utf-8'?>\n... <doc:data xmlns:doc=\"https://example.com\">\n...   <doc:row>\n...     <doc:shape>square</doc:shape>\n...     <doc:degrees>360</doc:degrees>\n...     <doc:sides>4.0</doc:sides>\n...   </doc:row>\n...   <doc:row>\n...     <doc:shape>circle</doc:shape>\n...     <doc:degrees>360</doc:degrees>\n...     <doc:sides/>\n...   </doc:row>\n...   <doc:row>\n...     <doc:shape>triangle</doc:shape>\n...     <doc:degrees>180</doc:degrees>\n...     <doc:sides>3.0</doc:sides>\n...   </doc:row>\n... </doc:data>'''\n\n>>> df = pd.read_xml(xml,\n...                  xpath=\"//doc:row\",\n...                  namespaces={\"doc\": \"https://example.com\"})\n>>> df\n      shape  degrees  sides\n0    square      360    4.0\n1    circle      360    NaN\n2  triangle      180    3.0",
    "type": "object",
    "properties": {
        "name": {
            "title": "Name",
            "type": "string"
        },
        "type": {
            "title": "Type",
            "default": "xml",
            "enum": [
                "xml"
            ],
            "type": "string"
        },
        "order_by": {
            "title": "Order By",
            "type": "array",
            "items": {
                "$ref": "#/definitions/BatchSorter"
            }
        },
        "base_directory": {
            "title": "Base Directory",
            "type": "string",
            "format": "path"
        },
        "regex": {
            "title": "Regex",
            "type": "string",
            "format": "regex"
        },
        "xpath": {
            "title": "Xpath",
            "default": "./*",
            "type": "string"
        },
        "namespaces": {
            "title": "Namespaces",
            "type": "object"
        },
        "elems_only": {
            "title": "Elems Only",
            "default": false,
            "type": "boolean"
        },
        "attrs_only": {
            "title": "Attrs Only",
            "default": false,
            "type": "boolean"
        },
        "names": {
            "title": "Names",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "encoding": {
            "title": "Encoding",
            "default": "utf-8",
            "type": "string"
        },
        "parser": {
            "title": "Parser",
            "default": "lxml",
            "type": "string"
        },
        "compression": {
            "title": "Compression",
            "default": "infer",
            "anyOf": [
                {
                    "enum": [
                        "infer",
                        "gzip",
                        "bz2",
                        "zip",
                        "xz",
                        "zstd",
                        "tar"
                    ],
                    "type": "string"
                },
                {
                    "type": "object"
                }
            ]
        },
        "storage_options": {
            "title": "Storage Options",
            "type": "object"
        }
    },
    "required": [
        "name",
        "base_directory",
        "regex"
    ],
    "additionalProperties": false,
    "definitions": {
        "BatchSorter": {
            "title": "BatchSorter",
            "type": "object",
            "properties": {
                "key": {
                    "title": "Key",
                    "type": "string"
                },
                "reverse": {
                    "title": "Reverse",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ]
        }
    }
}
