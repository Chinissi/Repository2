{
    "title": "STATAAsset",
    "description": "Read Stata file into DataFrame.\n\nParameters\n----------\nfilepath_or_buffer : str, path object or file-like object\n    Any valid string path is acceptable. The string could be a URL. Valid\n    URL schemes include http, ftp, s3, and file. For file URLs, a host is\n    expected. A local file could be: ``file://localhost/path/to/table.dta``.\n\n    If you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\n    By file-like object, we refer to objects with a ``read()`` method,\n    such as a file handle (e.g. via builtin ``open`` function)\n    or ``StringIO``.\nconvert_dates : bool, default True\n    Convert date variables to DataFrame time values.\nconvert_categoricals : bool, default True\n    Read value labels and convert columns to Categorical/Factor variables.\nindex_col : str, optional\n    Column to set as index.\nconvert_missing : bool, default False\n    Flag indicating whether to convert missing values to their Stata\n    representations.  If False, missing values are replaced with nan.\n    If True, columns containing missing values are returned with\n    object data types and missing values are represented by\n    StataMissingValue objects.\npreserve_dtypes : bool, default True\n    Preserve Stata datatypes. If False, numeric data are upcast to pandas\n    default types for foreign data (float64 or int64).\ncolumns : list or None\n    Columns to retain.  Columns will be returned in the given order.  None\n    returns all columns.\norder_categoricals : bool, default True\n    Flag indicating whether converted categorical data are ordered.\nchunksize : int, default None\n    Return StataReader object for iterations, returns chunks with\n    given number of lines.\niterator : bool, default False\n    Return StataReader object.\ncompression : str or dict, default None\n    If string, specifies compression mode. If dict, value at key 'method'\n    specifies compression mode. Compression mode must be one of {'infer',\n    'gzip', 'bz2', 'zip', 'xz', None}. If compression mode is 'infer'\n    and `filepath_or_buffer` is path-like, then detect compression from\n    the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise\n    no compression). If dict and compression mode is one of\n    {'zip', 'gzip', 'bz2'}, or inferred as one of the above,\n    other entries passed as additional compression options.\nstorage_options : dict, optional\n    Extra options that make sense for a particular storage connection, e.g.\n    host, port, username, password, etc. For HTTP(S) URLs the key-value pairs\n    are forwarded to ``urllib`` as header options. For other URLs (e.g.\n    starting with \"s3://\", and \"gcs://\") the key-value pairs are forwarded to\n    ``fsspec``. Please see ``fsspec`` and ``urllib`` for more details.\n\nReturns\n-------\nDataFrame or StataReader\n\nSee Also\n--------\nio.stata.StataReader : Low-level reader for Stata data files.\nDataFrame.to_stata: Export Stata data files.\n\nNotes\n-----\nCategorical variables read through an iterator may not have the same\ncategories and dtype. This occurs when  a variable stored in a DTA\nfile is associated to an incomplete set of value labels that only\nlabel a strict subset of the values.\n\nExamples\n--------\nRead a Stata dta file:\n\n>>> df = pd.read_stata('filename.dta')\n\nRead a Stata dta file in 10,000 line chunks:\n\n>>> itr = pd.read_stata('filename.dta', chunksize=10000)\n>>> for chunk in itr:\n...     do_something(chunk)",
    "type": "object",
    "properties": {
        "name": {
            "title": "Name",
            "type": "string"
        },
        "type": {
            "title": "Type",
            "default": "stata",
            "enum": [
                "stata"
            ],
            "type": "string"
        },
        "order_by": {
            "title": "Order By",
            "type": "array",
            "items": {
                "$ref": "#/definitions/BatchSorter"
            }
        },
        "base_directory": {
            "title": "Base Directory",
            "type": "string",
            "format": "path"
        },
        "regex": {
            "title": "Regex",
            "type": "string",
            "format": "regex"
        },
        "convert_dates": {
            "title": "Convert Dates",
            "default": true,
            "type": "boolean"
        },
        "convert_categoricals": {
            "title": "Convert Categoricals",
            "default": true,
            "type": "boolean"
        },
        "index_col": {
            "title": "Index Col",
            "type": "string"
        },
        "convert_missing": {
            "title": "Convert Missing",
            "default": false,
            "type": "boolean"
        },
        "preserve_dtypes": {
            "title": "Preserve Dtypes",
            "default": true,
            "type": "boolean"
        },
        "columns": {
            "title": "Columns",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "order_categoricals": {
            "title": "Order Categoricals",
            "default": true,
            "type": "boolean"
        },
        "chunksize": {
            "title": "Chunksize",
            "type": "integer"
        },
        "iterator": {
            "title": "Iterator",
            "default": false,
            "type": "boolean"
        },
        "compression": {
            "title": "Compression",
            "default": "infer",
            "anyOf": [
                {
                    "enum": [
                        "infer",
                        "gzip",
                        "bz2",
                        "zip",
                        "xz",
                        "zstd",
                        "tar"
                    ],
                    "type": "string"
                },
                {
                    "type": "object"
                }
            ]
        },
        "storage_options": {
            "title": "Storage Options",
            "type": "object"
        }
    },
    "required": [
        "name",
        "base_directory",
        "regex"
    ],
    "additionalProperties": false,
    "definitions": {
        "BatchSorter": {
            "title": "BatchSorter",
            "type": "object",
            "properties": {
                "key": {
                    "title": "Key",
                    "type": "string"
                },
                "reverse": {
                    "title": "Reverse",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ]
        }
    }
}
