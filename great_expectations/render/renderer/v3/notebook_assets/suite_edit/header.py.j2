from typing import List

import datetime

import great_expectations as ge
import great_expectations.jupyter_ux
from great_expectations import DataContext
from great_expectations.core.batch import BatchRequest
from great_expectations.core.expectation_suite import ExpectationSuite
{%- if batch_request %}
from great_expectations.validator.validator import Validator
from great_expectations.checkpoint import SimpleCheckpoint
from great_expectations.checkpoint.types.checkpoint_result import CheckpointResult
from great_expectations.data_context.types.resource_identifiers import ValidationResultIdentifier
{% else %}
from great_expectations.core.expectation_configuration import ExpectationConfiguration
from great_expectations.data_context.types.resource_identifiers import ExpectationSuiteIdentifier
{% endif -%}
import great_expectations.exceptions as ge_exceptions

context: DataContext = ge.data_context.DataContext()

{%- if batch_request %}
batch_request: dict = {{ batch_request }}
{% endif %}

# Feel free to change the name of your suite here. Renaming this will not remove the other one.
expectation_suite_name: str = "{{ suite_name }}"
suite: ExpectationSuite
try:
    suite = context.get_expectation_suite(expectation_suite_name=expectation_suite_name)
    print(f'Loaded ExpectationSuite "{suite.expectation_suite_name}" containing {len(suite.expectations)} expectations.')
except ge_exceptions.DataContextError:
    suite = context.create_expectation_suite(expectation_suite_name=expectation_suite_name)
    print(f'Created ExpectationSuite "{suite.expectation_suite_name}".')

{% if batch_request %}
validator: Validator = context.get_validator(
    batch_request=BatchRequest(**batch_request),
    expectation_suite_name=expectation_suite_name
)
column_names: List[str] = [f'"{column_name}"' for column_name in validator.columns()]
print(f"Columns: {', '.join(column_names)}.")
validator.head(n_rows=5, fetch_all=False)
{% endif %}
