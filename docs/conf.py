# -*- coding: utf-8 -*-
#
# great_expectations documentation build configuration file, created by
# sphinx-quickstart on Thu Jun  8 23:00:19 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import re
import sys
from collections import namedtuple

sys.path.insert(0, os.path.abspath("../"))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "autoapi.extension",
    # 'sphinx_rtd_theme',
    "sphinx.ext.autodoc",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    # 'sphinx.ext.mathjax'
    "sphinx.ext.napoleon",
    "sphinxcontrib.contentui",
    "sphinx_gitstamp",
    "sphinx.ext.autosectionlabel",
    "sphinxcontrib.discourse",
]

autoapi_type = "python"
autoapi_dirs = ["../great_expectations"]


# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# discourse url connect
discourse_url = "https://discuss.greatexpectations.io/"

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
index_doc = "index"

# General information about the project.
project = u"great_expectations"
copyright = u"2020, The Great Expectations Team. "
author = u"The Great Expectations Team"
gitstamp_fmt = "%d %b %Y"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u""
# The full version, including alpha/beta/rc tags.
release = u""

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "paraiso-dark"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "logo_only": True,
}

html_static_path = [
    "_static",
    "_static/style.css",
    "_static/hk-grotesk-pro/HKGroteskPro-Bold.woff2",
    "_static/hk-grotesk-pro/HKGroteskPro-Regular.woff2",
    "_static/hk-grotesk-pro/HKGroteskPro-SemiBold.woff2",
    "_static/hk-grotesk-pro/HKGroteskPro-Medium.woff2",
    "_static/header-logo.png",
    "_static/discuss-logo.png",
]
html_css_files = ["style.css"]

# html_logo = '../pip-logo.png'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".


# -- Options for Napoleon Extension --------------------------------------------

# Parse Google style docstrings.
# See http://google.github.io/styleguide/pyguide.html
napoleon_google_docstring = True

# Parse NumPy style docstrings.
# See https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
napoleon_numpy_docstring = True

# Should special members (like __membername__) and private members
# (like _membername) members be included in the documentation if they
# have docstrings.
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True

# If True, docstring sections will use the ".. admonition::" directive.
# If False, docstring sections will use the ".. rubric::" directive.
# One may look better than the other depending on what HTML theme is used.
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False

# If True, use Sphinx :ivar: directive for instance variables:
#     :ivar attr1: Description of attr1.
#     :type attr1: type
# If False, use Sphinx .. attribute:: directive for instance variables:
#     .. attribute:: attr1
#
#        *type*
#
#        Description of attr1.
napoleon_use_ivar = False

# If True, use Sphinx :param: directive for function parameters:
#     :param arg1: Description of arg1.
#     :type arg1: type
# If False, output function parameters using the :parameters: field:
#     :parameters: **arg1** (*type*) -- Description of arg1.
napoleon_use_param = True

# If True, use Sphinx :rtype: directive for the return type:
#     :returns: Description of return value.
#     :rtype: type
# If False, output the return type inline with the return description:
#     :returns: *type* -- Description of return value.
napoleon_use_rtype = True


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "great_expectationsdoc"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        index_doc,
        "great_expectations.tex",
        u"great\\_expectations Documentation",
        u"The Great Expectations Team",
        "manual",
    ),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (index_doc, "great_expectations", u"great_expectations Documentation", [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        index_doc,
        "great_expectations",
        u"great_expectations Documentation",
        author,
        "great_expectations",
        "Always know what to expect from your data.",
        "Miscellaneous",
    ),
]


autodoc_member_order = "bysource"

feature_annotation_list = [
    {
        'id': 'expectations_store_git', 'title': 'Expectation Store - Git', 'icon': 'fdsf', 'short_description': 'fdsf',
        'description': 'fdsf', 'how_to_guide_url': 'sdfds', 'maturity': 'Production',
        'maturity_details': {'api_stability':
                                 'Stable',
                             'implementation_completeness': 'Complete',
                             'unit_test_coverage': 'Complete',
                             'integration_infrastructure_test_coverage': 'N/A',
                             'documentation_completeness': 'Complete',
                             'bug_risk': 'Low'}},
    {
        'id': 'expectations_store_git', 'title': 'Expectation Store - Git', 'icon': 'fdsf', 'short_description': 'fdsf',
        'description': 'fdsf', 'how_to_guide_url': 'sdfds', 'maturity': 'Production',
        'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Complete',
                             'unit_test_coverage': 'Complete', 'integration_infrastructure_test_coverage': 'N/A',
                             'documentation_completeness': 'Complete', 'bug_risk': 'Low'}},
    {
        'id': 'expectations_store_git', 'title': 'Expectation Store - Git', 'icon': 'fdsf', 'short_description': 'fdsf',
        'description': 'fdsf', 'how_to_guide_url': 'sdfds', 'maturity': 'Production',
        'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Complete',
                             'unit_test_coverage': 'Complete', 'integration_infrastructure_test_coverage': 'N/A',
                             'documentation_completeness': 'Complete', 'bug_risk': 'Low'}},
    {
        'id': 'expectations_store_git', 'title': 'Expectation Store - Git', 'icon': 'fdsf', 'short_description': 'fdsf',
        'description': 'fdsf', 'how_to_guide_url': 'sdfds', 'maturity': 'Production',
        'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Complete',
                             'unit_test_coverage': 'Complete', 'integration_infrastructure_test_coverage': 'N/A',
                             'documentation_completeness': 'Complete', 'bug_risk': 'Low'}}
]


ANNOTATION_REGEX = ""
ANNOTATION_REGEX += "[ ]*(id:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(title:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(icon:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(short_description:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(description:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(how_to_guide_url:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(maturity:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(maturity_details:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(api_stability:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(implementation_completeness:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(unit_test_coverage:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(integration_infrastructure_test_coverage:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(documentation_completeness:.*)[\n]"
ANNOTATION_REGEX += "[ ]*(bug_risk:.*)[\n]"
annotation_regex_compiled = re.compile(ANNOTATION_REGEX)

maturity_details_keys = ["api_stability", "implementation_completeness", "unit_test_coverage", "integration_infrastructure_test_coverage", "documentation_completeness", "bug_risk"]

AnnotatedNode = namedtuple("AnnotatedNode", ["name", "path", "annotation", "type_"])


def _parse_feature_annotation(docstring):
    """Parse a docstring and return a feature annotation."""
    # list_of_annotations = []
    # id_val = ""
    # if docstring is None:
    #     return
    # if isinstance(docstring, str):
    #     for matches in re.findall(annotation_regex_compiled, docstring):
    #         annotation_dict = dict() # create new dictionary for each match
    #         maturity_details_dict = dict()
    #         for matched_line in matches:
    #             # split matched line_fields
    #             matched_line_fields = matched_line.split(":")
    #             this_key = matched_line_fields[0].strip()
    #             this_val = matched_line_fields[1].strip()
    #
    #             if this_key == "id":
    #                 id_val = this_val
    #
    #             if this_key in maturity_details_keys:
    #                 maturity_details_dict[this_key] = this_val
    #             elif this_key == "icon": # icon is a special cases
    #                 if this_val is "":
    #                     annotation_dict[this_key] = f"https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/feature_maturity_icons/{id_val}.png"
    #                 else:
    #                     annotation_dict[this_key] = this_val
    #             else:
    #                 annotation_dict[this_key] = this_val
    #
    #         annotation_dict["maturity_details"] = maturity_details_dict
    #         if annotation_dict is not None:
    #             list_of_annotations.append(annotation_dict)
    # return(list_of_annotations)

    return [{'id': 'expectations_store_git', 'title': 'Expectation Store - Git',
  'icon': 'https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/feature_maturity_icons/expectations_store_git.png',
  'short_description': '', 'description': '', 'how_to_guide_url': '', 'maturity': 'Production',
  'maturity_details': {'api_stability':
                           'Stable', 'implementation_completeness': 'Complete', 'unit_test_coverage': 'Complete',
                       'integration_infrastructure_test_coverage': 'N/A', 'documentation_completeness': 'Complete',
                       'bug_risk': 'Low'}},
 {'id': 'expectations_store_filesystem', 'title': 'Expectation Store - Filesystem',
  'icon': 'https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/feature_maturity_icons/expectations_store_filesystem.png',
  'short_description': '', 'description': '', 'how_to_guide_url': '', 'maturity': 'Production',
  'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Complete',
                       'unit_test_coverage': 'Complete', 'integration_infrastructure_test_coverage': 'N/A',
                       'documentation_completeness': 'Complete', 'bug_risk': 'Low'}},
 {'id': 'expectations_store_s3', 'title': 'Expectation Store - S3',
  'icon': 'https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/feature_maturity_icons/expectations_store_s3.png',
  'short_description': '', 'description': '', 'how_to_guide_url': '', 'maturity': 'Beta',
  'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Complete',
                       'unit_test_coverage': 'Complete', 'integration_infrastructure_test_coverage': 'Minimal',
                       'documentation_completeness': 'Complete', 'bug_risk': 'Low'}},
 {'id': 'expectations_store_gcs', 'title': 'Expectation Store - GCS',
  'icon': 'https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/feature_maturity_icons/expectations_store_gcs.png',
  'short_description': '', 'description': '', 'how_to_guide_url': '', 'maturity': 'Beta',
  'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Complete',
                       'unit_test_coverage': 'Complete', 'integration_infrastructure_test_coverage': 'Minimal',
                       'documentation_completeness': 'Partial', 'bug_risk': 'Low'}},
 {'id': 'expectations_store_azure_blob_storage', 'title': 'Expectation Store - Azure',
  'icon': 'https://great-expectations-web-assets.s3.us-east-2.amazonaws.com/feature_maturity_icons/expectations_store_azure_blob_storage.png',
  'short_description': '', 'description': '', 'how_to_guide_url': '', 'maturity': 'N/A',
  'maturity_details': {'api_stability': 'Stable', 'implementation_completeness': 'Minimal',
                       'unit_test_coverage': 'Minimal', 'integration_infrastructure_test_coverage': 'Minimal',
                       'documentation_completeness': 'Minimal', 'bug_risk': 'Moderate'}}]


def process_docstring(app, what, name, obj, options, lines):
    from sphinx.ext.autodoc import between

    docstring = "\n".join(lines)
    annotation_list = _parse_feature_annotation(docstring)

    process_between = between(marker="--ge-feature-maturity-info--", exclude=True)
    process_between(app, what, name, obj, options, lines)

    feature_annotation_template = """
.. admonition:: Feature Maturity: |icon| {title}

    | id: {id}
    | title: {title}
    | icon: {icon}
    | short_description: {short_description}
    | description: {description}
    | how_to_guide_url: {how_to_guide_url}
    | maturity: {maturity}
    | maturity_details:
    |   api_stability: {maturity_details[api_stability]}
    |   implementation_completeness: {maturity_details[implementation_completeness]}
    |   unit_test_coverage: {maturity_details[unit_test_coverage]}
    |   integration_infrastructure_test_coverage: {maturity_details[integration_infrastructure_test_coverage]}
    |   documentation_completeness: {maturity_details[documentation_completeness]}
    |   bug_risk: {maturity_details[bug_risk]}\

.. |icon| image:: {icon}
          :height: 15px
"""
    feature_annotation_str = ""
    for annotation in annotation_list:
        feature_annotation_str += feature_annotation_template.format(**annotation)

    lines += feature_annotation_str.splitlines()


def setup(app):
    from sphinx.ext.autodoc import between
    # app.connect('autodoc-process-docstring', between(marker="--ge-feature-maturity-info--",
    # exclude=True))
    app.connect('autodoc-process-docstring', process_docstring)
