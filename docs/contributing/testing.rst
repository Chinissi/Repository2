.. _contributing_testing:


Testing
==============


.. _contributing_testing__running_tests:

Running tests
------------------------

You can run all unit tests by running ``pytest`` in the ``great_expectations`` directory root.

.. #FIXME: Insert animated gif of normal behavior.

If you did not configure optional backends for testing, tests against these backends will fail.

.. #FIXME: Insert animated gif of breaking tests.

You can suppress these tests by adding the following flags:

- ``--no-postgresql`` will skip postgres tests
- ``--no-spark`` will skip spark tests 
- ``--no-sqlalchemy`` will skip all tests using sqlalchemy (i.e. all database backends)

For example, you can run ``pytest --no-spark --no-sqlalchemy`` to skip all local backend tests (with the exception of the pandas backend). Please note that these tests will still be run by the CI as soon as you open a PR, so some tests might fail if your code changes affected them.

.. #FIXME: Insert animated gif with backend tests suppressed.

Note: as of early 2020, the tests generate many warnings. Most of these are generated by dependencies (pandas, sqlalchemy, etc.) You can suppress them with pytest's ``--disable-pytest-warnings`` flag: ``pytest --no-spark --no-sqlalchemy --disable-pytest-warnings``

.. #FIXME: Insert animated gif with warnings suppressed.

.. _contributing_testing__writing_unit_tests:

Writing unit and integration tests
-----------------------------------------

Production code in Great Expectations must be thoroughly tested. In general, we insist on unit tests for all branches of every method, including likely error states. Most new feature contributions should include several unit tests. Contributions that modify or extend existing features should include a test of the new behavior.

Experimental code in Great Expectations need only be tested lightly. We are moving to a convention where experimental features are clearly labeled in documentation and the code itself. However, this convention is not uniformly applied today.

Most of Great Expectations' integration testing is in the CLI, which naturally exercises most of the core code paths. Because integration tests require a lot of developer time to maintain, most contributions should *not* include new integration tests, unless they change the CLI itself.

Note: we do not currently test Great Expectations against all types of SQL database. CI test coverage for SQL is limited to postgresql and sqlite. This can cause bugs when the sqlalchemy abstraction "leaks" (e.g. because of unsupported features, or differences in SQL dialects). We plan to rectify this situation later this year.


Unit tests for Expectations
---------------------------------------

For most Expectations, we create test fixtures as



.. Configuring integration tests


Manual testing
---------------------------------------------

We do manual testing (e.g. against various databases and backends) before major releases and in response to specific bugs and issues.
