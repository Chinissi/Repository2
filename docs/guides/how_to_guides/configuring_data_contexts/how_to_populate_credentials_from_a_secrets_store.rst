.. _how_to_guides__configuring_data_contexts__how_to_populate_credentials_from_a_secrets_store:

How to populate credentials from a secrets store
================================================

.. role:: python3(code)
   :language: python3

This guide will explain how to configure your ``great_expectations.yml`` project config to substitute variables from a secrets store (AWS Secrets Manager, GCP Secrets Manager or Azure KeyVault).

.. admonition:: Prerequisites: This how-to guide assumes you have already:

    - :ref:`Set up a working deployment of Great Expectations <tutorials__getting_started>`
    - :ref:`Knowledge on how to populate credentials <how_to_guides__configuring_data_contexts__how_to_use_a_yaml_file_or_environment_variables_to_populate_credentials>`
    - Configured a secret store and secrets in the cloud:
        + `AWS <https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html>`_
        + `GCP <https://cloud.google.com/secret-manager/docs/quickstart>`_
        + `Azure <https://docs.microsoft.com/azure/key-vault/secrets/quick-create-portal>`_

.. warning::
  Secrets store substitution uses the configurations from your ``great_expectations.yml`` project config **after** all other types of substitution are applied (from environment variables or from the ``config_variables.yml`` config file)

  The secrets store substitution works based on keywords. It tries to retrieve secrets from the secrets store for the following values :

  - AWS: values starting with ``arn:aws:secretsmanager``
  - GCP: values matching the following regex ``^projects\/[a-z0-9\_\-]{6,30}\/secrets``
  - Azure : values matching the following regex ``^https:\/\/[a-zA-Z0-9\-]{3,24}\.vault\.azure\.net``

  If you still need values in your ``great_expectations.yml`` project config that could match one of the keywords listed above   but you don't want to apply the secrets store substitution, you can prepend your value by the keyword : ``raw_value:``

  .. code-block:: yaml

    # great_expectations/great_expectations.yml

    resource_to_use: raw_value:arn:aws:secretsmanager:123456789012:secret:my_secret-1zAyu6

  If your value would usually start with ``raw_value:``, you can proceed as such:

  .. code-block:: yaml

    # great_expectations/great_expectations.yml

    key: raw_value:raw_value:value



Setup for AWS Secrets Manager
-----------------------------

To use AWS Secrets Manager, you may need to install the ``great_expectations`` package with its ``aws_secrets`` extra requirement:

.. code-block:: bash

  pip install great_expectations[aws_secrets]

In order to substitute your value by a secret in AWS Secrets Manager, you need to provide an arn of the secret like this one:
``arn:aws:secretsmanager:123456789012:secret:my_secret-1zAyu6``

.. admonition:: Note:

  The last 7 characters of the arn are automatically generated by AWS and are not mandatory to retrieve the secret, thus ``arn:aws:secretsmanager:region-name-1:123456789012:secret:my_secret`` will retrieve the same secret.

You will get the latest version of the secret by default.

You can get a specific version of the secret you want to retrieve by specifying its version UUID like this: ``arn:aws:secretsmanager:region-name-1:123456789012:secret:my_secret:00000000-0000-0000-0000-000000000000``

If your secret value is a JSON string, you can retrieve a specific value like this:
``arn:aws:secretsmanager:region-name-1:123456789012:secret:my_secret|key``

Or like this:
``arn:aws:secretsmanager:region-name-1:123456789012:secret:my_secret:00000000-0000-0000-0000-000000000000|key``


Example :
^^^^^^^^^

.. code-block:: yaml

  # great_expectations/great_expectations.yml

  datasources:
    dev_postgres_db:
      class_name: SqlAlchemyDatasource
      data_asset_type:
        class_name: SqlAlchemyDataset
        module_name: great_expectations.dataset
      module_name: great_expectations.datasource
      credentials:
        drivername: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:dev_db_credentials|drivername
        host: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:dev_db_credentials|host
        port: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:dev_db_credentials|port
        username: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:dev_db_credentials|username
        password: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:dev_db_credentials|password
        database: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:dev_db_credentials|database
    prod_postgres_db:
      class_name: SqlAlchemyDatasource
      data_asset_type:
        class_name: SqlAlchemyDataset
        module_name: great_expectations.dataset
      module_name: great_expectations.datasource
      credentials:
        drivername: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:PROD_DB_CREDENTIALS_DRIVERNAME
        host: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:PROD_DB_CREDENTIALS_HOST
        port: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:PROD_DB_CREDENTIALS_PORT
        username: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:PROD_DB_CREDENTIALS_USERNAME
        password: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:PROD_DB_CREDENTIALS_PASSWORD
        database: arn:aws:secretsmanager:${AWS_REGION}:${ACCOUNT_ID}:secret:PROD_DB_CREDENTIALS_DATABASE


Setup for GCP Secret Manager
----------------------------

To use GCP Secret Manager, you may need to install the ``great_expectations`` package with its ``gcp`` extra requirement:

.. code-block:: bash

  pip install great_expectations[gcp]

In order to substitute your value by a secret in GCP Secret Manager, you need to provide a name of the secret like this one:
``projects/project_id/secrets/my_secret``

You will get the latest version of the secret by default.

You can get a specific version of the secret you want to retrieve by specifying its version id like this: ``projects/project_id/secrets/my_secret/version/1``

If your secret value is a JSON string, you can retrieve a specific value like this:
``projects/project_id/secrets/my_secret|key``

Or like this:
``projects/project_id/secrets/my_secret/version/1|key``


Example :
^^^^^^^^^

.. code-block:: yaml

  # great_expectations/great_expectations.yml

  datasources:
    dev_postgres_db:
      class_name: SqlAlchemyDatasource
      data_asset_type:
        class_name: SqlAlchemyDataset
        module_name: great_expectations.dataset
      module_name: great_expectations.datasource
      credentials:
        drivername: projects/${PROJECT_ID}/secrets/dev_db_credentials|drivername
        host: projects/${PROJECT_ID}/secrets/dev_db_credentials|host
        port: projects/${PROJECT_ID}/secrets/dev_db_credentials|port
        username: projects/${PROJECT_ID}/secrets/dev_db_credentials|username
        password: projects/${PROJECT_ID}/secrets/dev_db_credentials|password
        database: projects/${PROJECT_ID}/secrets/dev_db_credentials|database
    prod_postgres_db:
      class_name: SqlAlchemyDatasource
      data_asset_type:
        class_name: SqlAlchemyDataset
        module_name: great_expectations.dataset
      module_name: great_expectations.datasource
      credentials:
        drivername: projects/${PROJECT_ID}/secrets/PROD_DB_CREDENTIALS_DRIVERNAME
        host: projects/${PROJECT_ID}/secrets/PROD_DB_CREDENTIALS_HOST
        port: projects/${PROJECT_ID}/secrets/PROD_DB_CREDENTIALS_PORT
        username: projects/${PROJECT_ID}/secrets/PROD_DB_CREDENTIALS_USERNAME
        password: projects/${PROJECT_ID}/secrets/PROD_DB_CREDENTIALS_PASSWORD
        database: projects/${PROJECT_ID}/secrets/PROD_DB_CREDENTIALS_DATABASE


Setup for Azure KeyVault
------------------------

To use Azure KeyVault, you may need to install the ``great_expectations`` package with its ``azure_secrets`` extra requirement:

.. code-block:: bash

  pip install great_expectations[azure_secrets]

In order to substitute your value by a secret in Azure KeyVault, you need to provide a name of the secret like this one:
``https://my-vault-name.vault.azure.net/secrets/my-secret``

You will get the latest version of the secret by default.

You can get a specific version of the secret you want to retrieve by specifying its version id (32 lowercase alphanumeric characters) like this: ``https://my-vault-name.vault.azure.net/secrets/my-secret/a0b00aba001aaab10b111001100a11ab``

If your secret value is a JSON string, you can retrieve a specific value like this:
``https://my-vault-name.vault.azure.net/secrets/my-secret|key``

Or like this:
``https://my-vault-name.vault.azure.net/secrets/my-secret/a0b00aba001aaab10b111001100a11ab|key``


Example :
^^^^^^^^^

.. code-block:: yaml

  # great_expectations/great_expectations.yml

  datasources:
    dev_postgres_db:
      class_name: SqlAlchemyDatasource
      data_asset_type:
        class_name: SqlAlchemyDataset
        module_name: great_expectations.dataset
      module_name: great_expectations.datasource
      credentials:
        drivername: https://${VAULT_NAME}.vault.azure.net/secrets/dev_db_credentials|drivername
        host: https://${VAULT_NAME}.vault.azure.net/secrets/dev_db_credentials|host
        port: https://${VAULT_NAME}.vault.azure.net/secrets/dev_db_credentials|port
        username: https://${VAULT_NAME}.vault.azure.net/secrets/dev_db_credentials|username
        password: https://${VAULT_NAME}.vault.azure.net/secrets/dev_db_credentials|password
        database: https://${VAULT_NAME}.vault.azure.net/secrets/dev_db_credentials|database
    prod_postgres_db:
      class_name: SqlAlchemyDatasource
      data_asset_type:
        class_name: SqlAlchemyDataset
        module_name: great_expectations.dataset
      module_name: great_expectations.datasource
      credentials:
        drivername: https://${VAULT_NAME}.vault.azure.net/secrets/PROD_DB_CREDENTIALS_DRIVERNAME
        host: https://${VAULT_NAME}.vault.azure.net/secrets/PROD_DB_CREDENTIALS_HOST
        port: https://${VAULT_NAME}.vault.azure.net/secrets/PROD_DB_CREDENTIALS_PORT
        username: https://${VAULT_NAME}.vault.azure.net/secrets/PROD_DB_CREDENTIALS_USERNAME
        password: https://${VAULT_NAME}.vault.azure.net/secrets/PROD_DB_CREDENTIALS_PASSWORD
        database: https://${VAULT_NAME}.vault.azure.net/secrets/PROD_DB_CREDENTIALS_DATABASE


.. discourse::
    :topic_identifier: 162
