.. _profiling:

================================================================================
Profiling
================================================================================

Profiling evaluates a data asset and summarizes its observed characteristics. By computing the observed properties of
data, Profiling helps to reason about the data's expected properties when creating expectation suites.

Profiling results are usually rendered into HTML - see :ref:`data_documentation`.
GE ships with the default BasicDatasetProfiler, which will produce an expectation_suite and so validation_results
that compile to a page for each table or DataFrame including an overview section:

.. image:: ../images/movie_db_profiling_screenshot_2.jpg

And then detailed statistics for each column:

.. image:: ../images/movie_db_profiling_screenshot_1.jpg


Profiling is still a beta feature in Great Expectations. Over time, we plan to extend and improve the
``BasicDatasetProfiler`` and also add additional profilers.

Profiling relies on automated inspection of data batches to generate and encode expectations. Together,
encoding expectations, testing data, and presenting expectation validation results are the three core services
offered by GE.

Warning: ``BasicDatasetProfiler`` will evaluate the entire batch
without limits or sampling, which may be very time consuming. As a rule of thumb, we recommend starting with batches
smaller than 100MB.

How Are Expectations And Profiling Related?
-------------------------------------------

In order to characterize a data asset, profiling creates an expectation suite. Unlike the expectations that are
typically used for data validation, these expectations do not necessarily apply any constraints; they can simply
identify statistics or other data characteristics that should be evaluated and made available in GE. For example, when
the ``BasicDatasetProfiler`` it encounters a numeric column, it will add an ``expect_column_mean_to_be_between``
expectation but choose the min_value and max_value to both be None: essentially saying only that it expects the mean
to exist.

.. code-block:: json

    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "rating",
        "min_value": null,
        "max_value": null
      }
    }

To "profile" a datasource, therefore, the :class:`~great_expectations.profile.basic_dataset_profiler.\
BasicDatasetProfiler` included in GE will generate a large number of very loosely-specified expectations. Effectively
it is asserting that the given statistic is relevant for evaluating batches of that data asset, but it is not yet sure
what the statistic's value should be.

In addition to creating an expectation suite, profiling data tests the suite against data.
The validation_result contains the output of that expectation suite when validated against the same batch of data.
For a loosely specified expectation like in our example above, getting the observed value was the sole purpose of
the expectation.

.. code-block:: json

    {
      "success": true,
      "result": {
        "observed_value": 4.05,
        "element_count": 10000,
        "missing_count": 0,
        "missing_percent": 0
      }
    }

Running a profiler on a data asset can also be useful to produce a large number of expectations to review
and potentially transfer to a new expectation suite used for validation in a pipeline.

How to Run Profiling
--------------------

Run During Init
~~~~~~~~~~~~~~~~~~~~~~

The ``great_expectations init`` command offers to profile a newly added datasource. If you agree, data assets in that
datasource will be profiled (e.g., tables in the database). By default the profiler will select the first 20 data
assets.

Expectation suites generated by the profiler will be saved in the configured ``expectations`` directory for expectation
suites. The expectation suite name by default is the name of hte profiler that generated it. Validation results will be
saved in the ``uncommitted/validations`` directory by default; the CLI will then offer to move them to the
``fixtures/validations`` directory from which data documentation is built.


Run From Command Line
~~~~~~~~~~~~~~~~~~~~~~

The GE command-line interface can also profile a datasource:

.. code-block:: bash

    great_expectations profile DATASOURCE_NAME

Just as when running during init, expectation suites generated by the profiler will be saved in the configured
``expectations`` directory for expectation suites. The expectation suite name by default is the name of the profiler
that generated it. Validation results will be saved in the ``uncommitted/validations`` directory by default.
The CLI will offer to move resulting validations to the
``fixtures/validations`` directory from which data documentation is built and to regenerate the HTML documentation.

See :ref:`data_documentation` for more information.

Run From Jupyter Notebook
~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to profile just one data asset in a datasource (e.g., one table in the database), you can do it using
Python in a Jupyter notebook:

.. code-block:: python

    from great_expectations.profile.basic_dataset_profiler import BasicDatasetProfiler

    # obtain the DataContext object
    context = ge.data_context.DataContext()

    # load a batch from the data asset
    batch = context.get_batch('ratings')

    # run the profiler on the batch - this returns an expectation suite and validation results for this suite
    expectation_suite, validation_result = BasicDatasetProfiler.profile(batch)

    # save the resulting expectation suite with a custom name
    context.set_expectation_suite(expectation_suite, "ratings", "my_profiled_expectations")



Custom Profilers
----------------------

Like most things in Great Expectations, Profilers are designed to be extensibile. You can develop your own profiler
by subclassing ``DataetProfiler``, or from the parent ``DataAssetProfiler`` class itself. For help, advice, and ideas
on developing custom profilers, please get in touch on `the Great Expectations slack channel \
<https://greatexpectations.io/slack>`_.


Known Issues
------------

When profiling CSV files, the profiler makes assumptions, such as considering the first line to be the header.
Overriding these assumptions is currently possible only when running profiling in Python by passing extra arguments to
get_batch.

