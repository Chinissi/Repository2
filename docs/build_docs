#!/bin/bash

# Build API docs then build docusaurus docs.
# Currently used in our netlify pipeline.

ORANGE='\033[0;33m'
NC='\033[0m' # No Color

CURRENT_COMMIT=$(git rev-parse HEAD)
# git pull to get the latest tags
git pull

# Get latest released version from tag, check out to build API docs.
# Only if not PR deploy preview.
if [ "$PULL_REQUEST" == "false" ]
then
  GX_LATEST=$(git tag | grep -E "(^[0-9]{1,}\.)+[0-9]{1,}" | sort -V | tail -1)
  echo -e "${ORANGE}Not in a pull request. Using latest released version ${GX_LATEST} at $(git rev-parse HEAD) to build API docs.${NC}"
  git checkout "$GX_LATEST"
  git pull
else
  echo -e "${ORANGE}Building from within a pull request, using the latest commit to build API docs so changes can be viewed in the Netlify deploy preview.${NC}"
fi

echo -e "${ORANGE}Copying previous versioned docs${NC}"
curl "https://superconductive-public.s3.us-east-2.amazonaws.com/oss_docs_versions_20230404.zip" -o "oss_docs_versions.zip"
unzip -oq oss_docs_versions.zip -d .

for version in $(jq -r '.[]' versions.json); do
  echo -e "${ORANGE}Copying code referenced in docs from $version and writing to versioned_code/version-$version${NC}"

  git checkout "$version"
  git pull
  mkdir -p versioned_code/version-"$version"
  cp -r ../../tests versioned_code/version-"$version"
  cp -r ../../examples versioned_code/version-"$version"
  cp -r ../../great_expectations versioned_code/version-"$version"

done

echo -e "${ORANGE}DEBUG${NC}"
echo -e "${ORANGE}pwd${NC}"
pwd
echo -e "${ORANGE}DEBUG${NC}"

echo -e "${ORANGE}DEBUG${NC}"
echo -e "${ORANGE}ls${NC}"
ls
echo -e "${ORANGE}ls versioned_code${NC}"
ls versioned_code
echo -e "${ORANGE}ls versioned_docs${NC}"
ls versioned_docs
echo -e "${ORANGE}DEBUG${NC}"

echo -e "${ORANGE}Checking back out current commit ${CURRENT_COMMIT} to build the rest of the docs.${NC}"
git checkout "$CURRENT_COMMIT"
git pull

# Update versioned code and docs

echo -e "${ORANGE}Updating filepath in versioned docs${NC}"
# This is done in prepare_prior_versions.py
# Update filepath in versioned docs if they are using the old linenumber style of file=<filepath>L<lineno>
# by adding the correct versioned_code filepath e.g. versioned_code/version-0.14.13/<filepath>

echo -e "${ORANGE}Updating snippet names in versioned docs and code${NC}"
# This is done in prepare_prior_versions.py
# Update snippet names in versioned docs if they are using the style of name="<snippet_name>"
# by prepending the version e.g. name="version-0.15.50 <original_snippet_name>"
# This is done in the docs and code so that the snippet processing tool can match up the correct snippet
# based on the version of the code file that existed when the document was released.
cd ../
python prepare_prior_versions.py
cd docusaurus

# Build current docs
echo -e "${ORANGE}Installing Great Expectations library dev dependencies.${NC}"
(cd ../../; pip install -c constraints-dev.txt -e ".[test]")

echo -e "${ORANGE}Installing api docs dependencies.${NC}"
(cd ../sphinx_api_docs_source; pip install -r requirements-dev-api-docs.txt)

echo -e "${ORANGE}Building API docs for current version.${NC}"
(cd ../../; invoke docs)

echo -e "${ORANGE}Building docusaurus docs.${NC}"
yarn build
