# This file is responsible for configuring the `dev` pipeline (https://dev.azure.com/great-expectations/great_expectations/_build)
#
# The pipeline is run under the following conditions:
#   - On the develop branch whenever a commit is made to an open PR
#
# `dev` runs unit tests for any directories that have sufficient coverage and integration tests for those that don't.
# The pipeline aims to balance both performance and safety to improve the developer experience but is innately less thorough than `great_expectations`.

trigger:
  branches:
    include:
    - pre_pr-* # Can be used to test both `great_expectations` and `dependency_graph` pipelines
    - develop
    exclude:
    - main

resources:
  containers:
  - container: postgres
    image: postgres:11
    ports:
    - 5432:5432
    env:
      POSTGRES_DB: "test_ci"
      POSTGRES_HOST_AUTH_METHOD: "trust"
  - container: mysql
    image: mysql:8.0.20
    ports:
      - 3306:3306
    env:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: test_ci
  - container: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    env:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ReallyStrongPwd1234%^&*
      MSSQL_DB: test_ci
      MSSQL_PID: Developer
    ports:
      - 1433:1433
  - container: trino
    image: trinodb/trino:400
    ports:
      - 8088:8080

variables:
  GE_USAGE_STATISTICS_URL: "https://qa.stats.greatexpectations.io/great_expectations/v1/usage_statistics"


stages:
  - stage: scope_check
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: changes
        steps:
          - task: ChangedFiles@1
            name: CheckChanges
            inputs:
              verbose: true
              rules: |
                [DocsChanged]
                docs/**
                tests/integration/docusaurus/**
                tests/integration/fixtures/**
                tests/test_sets/**
                examples/expectations/*.py
                static/_redirects
                static/index.html
                /*.js
                /*.json
                yarn.lock

                [GXChanged]
                great_expectations/**/*.py
                pyproject.toml
                setup.cfg
                setup.py
                MANIFEST.in
                tests/**
                docs/**/*.py
                /*.txt
                /*.yml
                requirements*
                reqs/*.txt
                ci/**/*.yml
                assets/scripts/**
                scripts/*.py
                scripts/*.sh

  - stage: import_ge
    dependsOn: scope_check
    pool:
      vmImage: 'ubuntu-20.04'

    jobs:
      - job: import_ge

        steps:
         - task: UsePythonVersion@0
           inputs:
             versionSpec: '3.8'
           displayName: 'Use Python 3.8'

         - bash: python -m pip install --upgrade pip
           displayName: 'Update pip'

         - script: |
             pip install  .
           displayName: 'Install GX and required dependencies (i.e. not sqlalchemy)'

         - script: |
             python -c "import great_expectations as gx; print('Successfully imported GX Version:', gx.__version__)"
           displayName: 'Import Great Expectations'

  - stage: usage_stats_integration
    dependsOn: [scope_check, import_ge]
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: test_usage_stats_messages
        condition: eq(stageDependencies.scope_check.changes.outputs['CheckChanges.GXChanged'], true)
        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip
            displayName: 'Update pip'

          - script: |
              pip install --constraint constraints-dev.txt ".[test]" pytest-azurepipelines
            displayName: 'Install dependencies'

          # Due to the relatively small number of usage_stats tests, we deem it appropriate to test them in their entirely through pytest
          - script: |
              pytest --no-sqlalchemy --aws-integration -v tests/integration/usage_statistics

            displayName: 'pytest'
            env:
              GE_USAGE_STATISTICS_URL: ${{ variables.GE_USAGE_STATISTICS_URL }}



  # 2023-07-18 - Chetan - these are being disabled due to a test failure introduced by the provider
  # GitHub issue requiring resolution: https://github.com/astronomer/airflow-provider-great-expectations/issues/114

  # - stage: airflow_provider
  #   dependsOn: [scope_check, import_ge]
  #   pool:
  #     vmImage: 'ubuntu-latest'

  #   jobs:
  #     - job: run_airflow_provider_tests
  #       steps:
  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.8'
  #           displayName: 'Use Python 3.8'

  #         - script: ./ci/checks/check_min_airflow_dependency_compatibility.sh
  #           name: CheckMinAirflowDependencyCompatibility

  #         - script: ./ci/checks/run_gx_airflow_operator_tests.sh
  #           name: RunAirflowProviderTests
