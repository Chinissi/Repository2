# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

resources:
  containers:
  - container: postgres
    image: postgres:11
    ports:
    - 5432:5432
    env:
      POSTGRES_DB: "test_ci"
      POSTGRES_HOST_AUTH_METHOD: "trust"
  - container: mysql
    image: mysql:8.0.20
    ports:
    - 3306:3306
    env:
     MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
     MYSQL_DATABASE: test_ci
  - container: mssql
    image: microsoft/mssql-server-linux
    env:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ReallyStrongPwd1234%^&*
      MSSQL_DB: test_ci
      MSSQL_PID: Developer
    ports:
      - 1433:1433

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: lint
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: lint
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.7
            displayName: 'Use Python 3.7'

          - script: |
              pip install  isort[requirements]==4.3.21 black==19.10b0
              isort --check-only --skip docs/
              black --check --exclude docs/ .

  - stage: required
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: []

    jobs:
      - job: compatibility_matrix
        variables:
          GE_pytest_pip_opts: '--requirement requirements-dev-util.txt --requirement requirements-dev-test.txt'
          GE_pytest_opts: '--no-sqlalchemy --no-spark'
        strategy:
          matrix:
            Python36-Pandas023:
              python.version: '3.6'
              pandas.version: '0.23.4'
            Python37-Pandas025:
              python.version: '3.7'
              pandas.version: '0.25.3'
            Python38-PandasLatest:
              python.version: '3.8'
              pandas.version: 'latest'

        # TODO: refactor steps into a task
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip
            displayName: 'Update pip'

          - bash: pip install  pandas
            condition: eq(variables['pandas.version'], 'latest')
            displayName: 'Install pandas latest'

          - bash: pip install  pandas==$(pandas.version)
            condition: ne(variables['pandas.version'], 'latest')
            displayName: 'Install pandas - $(pandas.version)'

          - script: |
              pip install  $(GE_pytest_pip_opts)
              pip install  --requirement requirements.txt
              # Consider fragmenting *all* integration tests into separate folder and run
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install  pytest pytest-cov pytest-azurepipelines
              pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

      - job: comprehensive
        services:
          postgres: postgres
          # mysql: mysql

        variables:
          GE_pytest_pip_opts: '--requirement requirements-dev-util.txt --requirement requirements-dev-spark.txt --requirement requirements-dev-sqlalchemy.txt --requirement requirements-dev-test.txt'
          GE_pytest_opts: ''

        strategy:
          matrix:
            Python36:
              python.version: '3.6'
              pandas.version: 'latest'
            Python37:
              python.version: '3.7'
              pandas.version: 'latest'

        # TODO: refactor steps into a task
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: sudo apt-get install -y pandoc
            displayName: 'Install pandoc'

          - bash: python -m pip install --upgrade pip
            displayName: 'Update pip'

          - bash: pip install  pandas
            condition: eq(variables['pandas.version'], 'latest')
            displayName: 'Install pandas latest'

          - bash: pip install  pandas==$(pandas.version)
            condition: ne(variables['pandas.version'], 'latest')
            displayName: 'Install pandas - $(pandas.version)'

          - script: |
              pip install --requirement requirements.txt
              pip install $(GE_pytest_pip_opts)
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - stage: db_integration
    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: []

    jobs:
      - job: mysql
        services:
          mysql: mysql

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip
            displayName: 'Update pip'

          - script: |
              echo "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));" > mysql_setup_script.sql
              mysql --host=127.0.0.1 --port=3306 --user=root < mysql_setup_script.sql
              pip install -r requirements.txt
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --requirement requirements-dev-util.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install -r requirements.txt
              pip install  pytest pytest-cov pytest-azurepipelines
              pytest --mysql --no-postgresql --no-spark --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

      - job: mssql
        services:
          mssql: mssql

        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip
            displayName: 'Update pip'

          - script: |
              sqlcmd -U sa -P "ReallyStrongPwd1234%^&*" -q "CREATE DATABASE test_ci;" -o create_db_output.txt

          - script: |
              pip install -r requirements.txt
              pip install --requirement requirements-dev-test.txt --requirement requirements-dev-sqlalchemy.txt --requirement requirements-dev-util.txt
              pip install .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --mssql --no-postgresql --no-spark --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
            displayName: 'pytest'

  - stage: deploy
    condition: and(succeeded(), eq(variables.isMain, true))

    pool:
      vmImage: 'ubuntu-latest'

    dependsOn: [required, lint]

    jobs:
      - job: deploy
        variables:
          python.version: '3.8'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Use Python $(python.version)'

          - bash: python -m pip install --upgrade pip
            displayName: 'Update pip'

          - script: |
              pip install twine
              git tag --annotate $(cat ./great_expectations/deployment_version) -m "$(cat ./great_expectations/deployment_version)\ || echo "tag exists, skipping"

          - task: TwineAuthenticate@0
            condition: succeeded()
            inputs:
              externalFeed: pypi
