# This file is responsible for configuring the `packaging_and_installation` pipeline (https://dev.azure.com/great-expectations/great_expectations/_build)
#
# The pipeline is run under the following conditions:
#   - On the main branch when a weekly release is being cut
#   - On the develop branch as scheduled by the below cron job
#
#  `packaging_and_installation` is meant to test the installation and packaging of Great Expectations in a variety of environments.
#
#  This includes:
#  * Linux, MacOS, and Windows
#  * pip and cond

schedules:
- cron: 0 0 * * *
  displayName: Scheduled Runs
  branches:
    include:
    - develop
    exclude:
    - main
  always: true # As this is run once a day, we always want to run it (regardless of whether or not changes have occurred)

# trigger:
#   branches:
#     include:
#     - pre_pr-*
#     - main
#     exclude:
#     - develop

# The pipeline is run under two primary conditions: if merging into main or as scheduled by the above cron job.
# variables:
#   isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
#   isScheduled: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Schedule'))]
#   GE_USAGE_STATISTICS_URL: "https://qa.stats.greatexpectations.io/great_expectations/v1/usage_statistics"

# windows / ubuntu/ macos
# 3.6 / 3.7 / 3.8 / 3.9
# conda / pip
# dev install
# dev-lite install

stages:
  - stage: linux_user_install
    dependsOn: []
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: pip
        dependsOn: []
        strategy:
          matrix:
            py3.7:
              pythonVersion: '3.7'
            py3.8:
              pythonVersion: '3.8'
            py3.9:
              pythonVersion: '3.9'
            py3.10:
              pythonVersion: '3.10'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'

          - script: |
              python -m pip install --upgrade pip==21.3.1
              pip install great_expectations
            displayName: 'Install Great Expectations'

          - script: |
              great_expectations --version
              mkdir "tmp" && cd "tmp"
              great_expectations -y init --no-usage-stats
            displayName: 'Confirm installation'

      - job: conda
        dependsOn: []
        strategy:
          matrix:
            py3.7:
              pythonVersion: '3.7'
            py3.8:
              pythonVersion: '3.8'
            py3.9:
              pythonVersion: '3.9'
            py3.10:
              pythonVersion: '3.10'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'

          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          - script: |
              conda create --yes --name ge_dev
            displayName: Create Anaconda environment

          - script: |
              source activate ge_dev
              conda install --yes --name ge_dev -c conda-forge great-expectations
            displayName: 'Install Great Expectations'

          - script: |
              source activate ge_dev
              great_expectations --version
              # mkdir "tmp" && cd "tmp"
              # great_expectations -y init --no-usage-stats
            displayName: 'Confirm installation'

  - stage: linux_dev_install
    dependsOn: [linux_user_install]
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
      - job: lightweight
        dependsOn: []
        strategy:
          matrix:
            py3.7:
              pythonVersion: '3.7'
            py3.8:
              pythonVersion: '3.8'
            py3.9:
              pythonVersion: '3.9'
            py3.10:
              pythonVersion: '3.10'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              pip install  --requirement requirements-dev.txt --constraint constraints-dev.txt
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              pip install pytest pytest-cov pytest-azurepipelines
              pytest --no-spark --no-postgresql --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

      - job: full
        dependsOn: []
        strategy:
          matrix:
            py3.7:
              pythonVersion: '3.7'
            py3.8:
              pythonVersion: '3.8'
            py3.9:
              pythonVersion: '3.9'
            py3.10:
              pythonVersion: '3.10'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'

          - bash: python -m pip install --upgrade pip==21.3.1
            displayName: 'Update pip'

          - script: |
              pip install  --requirement requirements-dev.txt --constraint constraints-dev.txt
              pip install  .
            displayName: 'Install dependencies'

          - script: |
              echo "This should test!"
              # pip install pytest pytest-cov pytest-azurepipelines
              # pytest --no-spark --no-postgresql --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
            displayName: 'pytest'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: '**/test-*.xml'
              testRunTitle: 'Publish test results for Python $(python.version)'

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
