# This file is responsible for configuring the `packaging` pipeline (https://dev.azure.com/great-expectations/great_expectations/_build)
#
# The pipeline is run under the following conditions:
#   - On the main branch when a weekly release is being cut
#   - On the develop branch as scheduled by the below cron job
#
#  `packaging` is meant to test the installation and packaging of Great Expectations in a variety of environments.

schedules:
- cron: 0 0 * * *
  displayName: Scheduled Runs
  branches:
    include:
    - develop
    exclude:
    - main
  always: true # As this is run once a day, we always want to run it (regardless of whether or not changes have occurred)

trigger:
  branches:
    include:
    - pre_pr-*
    - main
    exclude:
    - develop

# The pipeline is run under two primary conditions: if merging into main or as scheduled by the above cron job.
variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isScheduled: $[and(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Schedule'))]
  GE_USAGE_STATISTICS_URL: "https://qa.stats.greatexpectations.io/great_expectations/v1/usage_statistics"

stages:
  - stage: required
    pool:
      vmImage: 'ubuntu-18.04'

    # jobs:
    #   - job: compatibility_matrix
    #     condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true))
    #     variables:
    #       GE_pytest_opts: '--no-sqlalchemy --no-spark'
    #     strategy:
    #       matrix:
    #         Python36-Pandas023:
    #           python.version: '3.6'
    #           numpy.version: '1.14.1'
    #           pandas.version: '0.23.4'
    #           scipy.version: '0.19.0'
    #           GE_pytest_pip_opts: '--requirement requirements-dev-base.txt --constraint constraints-dev.txt'
    #         Python37-Pandas025:
    #           python.version: '3.7'
    #           numpy.version: '1.14.1'
    #           pandas.version: '0.25.3'
    #           # numpy 1.20 and pandas 0.25.3 do not coexist happily
    #           scipy.version: '0.19.0'
    #           GE_pytest_pip_opts: '"numpy<1.20" --requirement requirements-dev-base.txt --constraint constraints-dev.txt'
    #         Python38-PandasLatest:
    #           python.version: '3.8'
    #           numpy.version: 'latest'
    #           pandas.version: 'latest'
    #           scipy.version: 'latest'
    #           GE_pytest_pip_opts: '--requirement requirements-dev-base.txt --constraint constraints-dev.txt'

    #     steps:
    #       - task: UsePythonVersion@0
    #         inputs:
    #           versionSpec: '$(python.version)'
    #         displayName: 'Use Python $(python.version)'

    #       - bash: python -m pip install --upgrade pip==21.3.1
    #         displayName: 'Update pip'

    #       - bash: pip install numpy
    #         condition: eq(variables['scipy.version'], 'numpy')
    #         displayName: 'Install numpy latest'

    #       - bash: pip install pandas
    #         condition: eq(variables['pandas.version'], 'latest')
    #         displayName: 'Install pandas latest'

    #       - bash: pip install scipy
    #         condition: eq(variables['scipy.version'], 'latest')
    #         displayName: 'Install scipy latest'

    #       - bash: pip install pandas==$(pandas.version)
    #         condition: ne(variables['pandas.version'], 'latest')
    #         displayName: 'Install pandas - $(pandas.version)'

    #       - script: |
    #           pip install $(GE_pytest_pip_opts)
    #           pip install  --requirement requirements.txt
    #           # Consider fragmenting *all* integration tests into separate folder and run
    #           pip install  .
    #         displayName: 'Install dependencies'

    #       - script: |
    #           pip install pytest pytest-cov pytest-azurepipelines
    #           pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
    #         displayName: 'pytest'

    #       - task: PublishTestResults@2
    #         condition: succeededOrFailed()
    #         inputs:
    #           testResultsFiles: '**/test-*.xml'
    #           testRunTitle: 'Publish test results for Python $(python.version)'

    #       - task: PublishCodeCoverageResults@1
    #         inputs:
    #           codeCoverageTool: Cobertura
    #           summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    #           reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

    #   - job: comprehensive
    #     condition: or(eq(variables.isScheduled, true), eq(variables.isMain, true))

    #     services:
    #       postgres: postgres

    #     variables:
    #       GE_pytest_opts: ''

    #     strategy:
    #       matrix:
    #         Python36:
    #           python.version: '3.6'
    #           pandas.version: 'latest'
    #           GE_pytest_pip_opts: '"pyspark<3.0.0" --requirement requirements-dev.txt --constraint constraints-dev.txt'
    #         Python37:
    #           python.version: '3.7'
    #           pandas.version: 'latest'
    #           GE_pytest_pip_opts: '"pyspark<3.0.0" --requirement requirements-dev.txt --constraint constraints-dev.txt'
    #         Python38:
    #           python.version: '3.8'
    #           pandas.version: 'latest'
    #           GE_pytest_pip_opts: '--requirement requirements-dev.txt --constraint constraints-dev.txt'
    #         Python39:
    #           python.version: '3.9'
    #           pandas.version: 'latest'
    #           GE_pytest_pip_opts: '--requirement requirements-dev.txt --constraint constraints-dev.txt'

    #     steps:
    #       - task: UsePythonVersion@0
    #         inputs:
    #           versionSpec: '$(python.version)'
    #         displayName: 'Use Python $(python.version)'

    #       - bash: python -m pip install --upgrade pip==21.3.1
    #         displayName: 'Update pip'

    #       - script: |
    #           sudo apt-get install -y pandoc
    #           pip install pypandoc
    #         displayName: 'Install pandoc'

    #       - bash: pip install pandas
    #         condition: eq(variables['pandas.version'], 'latest')
    #         displayName: 'Install pandas latest'

    #       - bash: pip install pandas==$(pandas.version)
    #         condition: ne(variables['pandas.version'], 'latest')
    #         displayName: 'Install pandas - $(pandas.version)'

    #       - script: |
    #           pip install --requirement requirements.txt
    #           echo "about to run pip install $(GE_pytest_pip_opts)"
    #           pip install $(GE_pytest_pip_opts)
    #           pip install  .
    #         displayName: 'Install dependencies'

    #       - script: |
    #           pip install pytest pytest-cov pytest-azurepipelines
    #           pytest $(GE_pytest_opts) --napoleon-docstrings --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --ignore=tests/cli --ignore=tests/integration/usage_statistics
    #         displayName: 'pytest'

    #       - task: PublishTestResults@2
    #         condition: succeededOrFailed()
    #         inputs:
    #           testResultsFiles: '**/test-*.xml'
    #           testRunTitle: 'Publish test results for Python $(python.version)'

    #       - task: PublishCodeCoverageResults@1
    #         inputs:
    #           codeCoverageTool: Cobertura
    #           summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    #           reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
